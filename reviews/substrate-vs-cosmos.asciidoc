= Substrate vs Cosmos SDK Comparision

[%header,cols="20%,40%,40%"]
|===
|
|Substrate
|Cosmos-SDK

| Язык логики
| Rust, позже другие языки компилируемые в WASM.

Сложно найти разработчиков на Rust. Сложно разбираться в синтаксисе. Но полноценного знания Rust не требуется для создания логики паллетов (модулей логики, похожих на контракты)

|* Go для работы на высоком уровне через Cosmos-SDK

* Любой для работы на низком уровне через tendermint

На го проще найти разработчиков. Язык примитивный, разобраться можно за день.

| Документация
| Версии 1.0 уделили мало внимания, сейчас готовят к релиза версию 2.0.

По версии 2.0 доку оцениваю на 3 из 10. Сейчас видна активная работа над документацией.
Сейчас приходится собирать информацию из доки по самому субстрату, по polkadot и по kusama.
| С виду неплохая документация, довольно информативная. (Tendermint/Comsos SDK) Бегло просмотрев оцениваю на 7 из 10.

| Туториалы
| Хорошие, интерактивные. На 8 из 10
| Плохие, устаревшие, мало, не работают, баги не фиксятся. На 3 из 10.

| Описание запуска PoS
| Нет (Нет даже готового темплейта). Пришлось брать темплейт aura и на основе исходников других нод копипастить не только настройки, но и несколько файлов с исходным кодом. Шаги по подключению валидаторов описаны обрывками в описаниях существующих сетей + немного есть в видео семинарах.
| По умолчанию запускается цепочка с одним валидатором PoS. Шаги по подключению дальнейших валидаторов не описаны.

| Логика
| Все pallet-ы (ранее SRML модули) компилируются в один wasm бинарник и обновляются
Либо root адресом
Либо голосованием в модуле демократии

Паллет содержит всю логику в одном файле, но может состоять из нескольких(если очень сложный). По сущности своей очень напоминает контракт Solidity. Похожесть достигается за счет макросов.

Работа с key-value стораджем облегчена специальными типами-обертками для разработки паллета.

https://substrate.dev/docs/en/next/development/module/#example-module

| Все модули компилятся в go-приложение, напоминающее больше веб-приложение, нежели чем какой то контракт.

Как обновляются - не знаю.

Логика модуля разбросана по множеству файлов даже для самого примитивного модуля.

Работа с key-value стораджем практически напрямую - на более низком уровне, чем в substrate паллетах.

Фокус рассеивается из за  boilerplate в модулях - один модуль состоит из порядка 20 файлов

| Контракты
| 
* Ink! - парити реализовала свой довольно читаемый язык для смарт контрактов на расте

* EVM - парити прикрутила готовую реализацию SputnikVM. https://github.com/sorpaas/rust-evm

Все это рантайм модули, поэтому легко подключаются/отключаются

| EVM - реализован в цепочке Ethermint. Не факт, что можно будет добавить после запуска своей сети.

| Взаимодействие с цепочкой (отправка транзакций, чтение стейта)
| Через JS-API https://github.com/polkadot-js/api

Подключается через HTTP либо WS

|* CLI обертки для каждого метода

* REST обертки для каждого метода

HTTP-REST сервер поднимается отдельным сервисом

| Готовые модули
| https://github.com/paritytech/substrate/tree/master/frame[36 штук]
| https://github.com/cosmos/cosmos-sdk/tree/master/x[16 штук]

| Чатик саппорта
| Активный. Каждый день сообщения, минимум штук 5. Отвечают очень быстро, в том числе на вопросы из StackOverflow
| Не особо активный, есть дни вообще без сообщений.

| Компиляция
| Очень долго. Сильно зависит от производительности CPU.

* Сборка ноды с 0 на маке - минут 40-50

* Сборка после изменения рантайма на маке минут 2-4

На стационарном из офиса в среднем в 2 раза быстрее.

| Быстро, меньше минуты, как и обычное приложение на Go.

| Размер рабочей папки для разработки (не самого бинарника ноды!)
| Огромный. 

* Первая версия yalland-node занимает 10 гигов.

* Дефлотная субстрат со всеми включенными модулями - 18 гигов

| Не заметный. Не более размера репозиториев гита
|===
